// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
	provider      = "prisma-client-js"
	binaryTargets = ["native", "debian-openssl-1.1.x"]
}

generator erd {
	provider = "prisma-erd-generator"
}

datasource db {
	provider = "mysql"
	url      = env("DATABASE_URL")
}

// ************************** COMMON USER **************************

model Client {
	id                 Int           @id @default(autoincrement())
	personName         String        @map("person_name")
	userName           String        @map("user_name")
	cpf                String        @unique
	rg                 String?
	profilePhoto       String?       @map("profile_photo")
	profileBannerPhoto String?       @map("profile_banner_photo")
	email              String        @unique
	password           String
	isVet              Boolean
	PhoneNumber        PhoneNumber[]
	Pet                Pet[]
	Appointments       Appointment[]

	addressId Int     @map("address_id")
	Address   Address @relation(fields: [addressId], references: [id])

	@@map("tbl_user")
}

model Veterinary {
	id                 Int      @id @default(autoincrement())
	personName         String   @map("person_name")
	userName           String   @map("user_name")
	cpf                String   @unique
	rg                 String?
	profilePhoto       String?  @map("profile_photo")
	profileBannerPhoto String?  @map("profile_banner_photo")
	email              String   @unique
	password           String
	isVet              Boolean  @map("is_vet")
	occupationArea     String   @map("occupation_area")
	formation          String
	institution        String
	crmv               String   @unique
	formationDate      DateTime @map("formation_date")
	startActingDate    DateTime @map("start_acting_date")

	AnimalTypesVetInfos     AnimalTypesVetInfos[]
	VeterinaryEspecialities VeterinarySpecialities[]
	PhoneNumber             PhoneNumber[]
	Appointments            Appointment[]

	addressId Int     @map("address_id")
	Address   Address @relation(fields: [addressId], references: [id])

	@@map("tbl_veterinary")
}

// ************************** VET INFOS **************************

// model VetInfos {
//   id                     Int                      @id @default(autoincrement())
//   Client                   Client?
//   AnimalTypesVetInfos    AnimalTypesVetInfos[]
//   VeterinarySpecialities VeterinarySpecialities[]
//   Appointment            Appointment[]
//
//   occupationArea  String
//   formation       String
//   institution     String
//   crmv            String
//   formationDate   DateTime
//   startActingDate DateTime
//
//   AnimalTypesVetInfos     AnimalTypesVetInfos[]
//   VeterinaryEspecialities VeterinarySpecialities[]
//   @@map("tbl_vet_infos")
// }

model AnimalTypesVetInfos {
	id Int @id @default(autoincrement())

	animalTypesId Int         @map("animal_type_id")
	animalTypes   AnimalTypes @relation(fields: [animalTypesId], references: [id])
	veterinaryId  Int?        @map("veterinary_id")
	Veterinary    Veterinary? @relation(fields: [veterinaryId], references: [id])

	@@map("tbl_animal_type_vet_infos")
}

model VeterinarySpecialities {
	id             Int          @id @default(autoincrement())
	specialitiesId Int          @map("specialities_id")
	specialities   Specialities @relation(fields: [specialitiesId], references: [id])
	veterinaryId   Int?         @map("veterinary_id")
	Veterinary     Veterinary?  @relation(fields: [veterinaryId], references: [id])

	@@map("tbl_veterinary_specialities")
}

model Specialities {
	id                      Int                      @id @default(autoincrement())
	name                    String
	VeterinaryEspecialities VeterinarySpecialities[]

	@@map("tbl_specialities")
}

model AnimalTypes {
	id                  Int                   @id @default(autoincrement())
	name                String
	AnimalTypesVetInfos AnimalTypesVetInfos[]

	@@map("tbl_animal_type")
}

// ************************** PHONE NUMBER **************************

model PhoneNumber {
	id     Int    @id @default(autoincrement())
	number String

	userId       Int         @map("user_id")
	User         Client      @relation(fields: [userId], references: [id])
	Veterinary   Veterinary? @relation(fields: [veterinaryId], references: [id])
	veterinaryId Int?        @map("vetearinary_id")

	@@map("tbl_phone_number")
}

// ************************** ADDRESS **************************

model Address {
	id         Int     @id @default(autoincrement())
	cep        String
	complement String?
	number     String

	User       Client[]
	Veterinary Veterinary[]

	@@map("tbl_address")
}

// ************************** PET INFOS **************************

model Pet {
	id        Int      @id @default(autoincrement())
	name      String
	birthDate DateTime @map("birth_date")
	photo     String?
	microship Boolean

	petSizeId Int     @map("pet_size_id")
	petSize   PetSize @relation(fields: [petSizeId], references: [id])

	petGenderId Int       @map("pet_gender_id")
	petGender   PetGender @relation(fields: [petGenderId], references: [id])

	petSpecieId Int       @map("pet_specie_id")
	petSpecie   PetSpecie @relation(fields: [petSpecieId], references: [id])

	ownerId Int    @map("owner_id")
	Owner   Client @relation(fields: [ownerId], references: [id])

	@@map("tbl_pet")
}

model PetSize {
	id   Int    @id @default(autoincrement())
	name String

	Pet Pet[]

	@@map("tbl_pet_size")
}

model PetGender {
	id       Int    @id @default(autoincrement())
	initials String
	name     String
	Pet      Pet[]

	@@map("tbl_pet_gender")
}

model PetSpecie {
	id   Int    @id @default(autoincrement())
	name String
	Pet  Pet[]

	@@map("tbl_pet_specie")
}

model Appointment {
	id          Int      @id @default(autoincrement())
	description String
	status      Status
	date        DateTime @db.Date
	startsAt    DateTime @map("starts_at") @db.Time()
	endsAt      DateTime @map("ends_at") @db.Time()

	clientId     Int?        @map("client_id")
	Client       Client?     @relation(fields: [clientId], references: [id])
	veterinaryId Int?        @map("veterinary_id")
	Veterinary   Veterinary? @relation(fields: [veterinaryId], references: [id])

	@@map("tbl_appointment")
}

enum Status {
	CONCLUDED
	SCHEDULED
	WAITING_CONFIRMATION
	CANCELED
}
